#%RAML 1.0
title: Groceries delivery app - Gateway
version: v1
baseUri: https://mini-delivery.com/
traits:
  paginated:
      queryParameters:
        page:
          description: page
          required: false
          type: integer
          format: int32
        pageSize:
          description: pageSize
          required: false
          type: integer
          format: int32    
      responses:
        200:
          headers:
            x-total-pages:  
securitySchemes:
    oauth_2_0:
        description: |
            OAuth 2.0 for authenticating API requests.
        type: OAuth 2.0
        describedBy:
            headers:
                Authorization:
                    description: |
                        Used to send a valid OAuth 2 access token. Do not use 
                        with the "access_token" query string parameter.
                    type: string
            queryParameters:
                access_token:
                    description: |
                        Used to send a valid OAuth 2 access token. Do not use together with 
                        the "Authorization" header
                    type: string
            responses:
                401:
                    description: |
                        Bad or expired token. This can happen if the user or Identity Provider
                        revoked or expired an access token. To fix, you should re-
                        authenticate the user.
                403:
                    description: |
                        Bad OAuth request (wrong consumer key, bad nonce, expired
                        timestamp...). Re-authenticating the user won't help here.
        settings:
            authorizationUri: https://example-identity-provider.com/oauth2/authorize
            accessTokenUri: https://example-identity-provider.com/oauth2/token
            authorizationGrants: [ authorization_code ]
types:
    UUID:
        type: string
        description: UUID
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$

    OrderItem:
        description: Element of an order
        type: object
        properties:
            grossPrice:
                type: number
                description: the final sales price per unit of an item
            currency:
                type: string
                pattern: ^[A-Z]{3}$
            productName: string
            quantity: number
        example:
            grossPrice: 12
            currency: PLN
            productName: bread
            quantity: 3
    OrderItemForCreation:
        description: Element of an OrderForCreation
        type: object
        properties:
            productId: UUID
            quantity: number
        example:
            orderItemId: ca543631-3df7-4d06-8091-179df67c8460
            quantity: 3
    OrderStatus:
        type: object
        description: Order Status
        properties:
            orderStatus:
                type: string
                enum: [Pending, RejectedByShop, InProgress, ReadyForDelivery, WaitingForPickUp, PickedUpByCourier, Delivered]
    Order:
        description: Groceries products order
        type: object
        properties:
            orderId: UUID
            orderItems: OrderItem[]
            creationDate: datetime
            deliveryDate: datetime
            clientAddress:
                type: object
                properties:
                    street: string
                    city: string
                    zipCode: string
            additionalInfo: string
            orderStatus: OrderStatus
        example:
            orderId: c2cf4e9e-0393-4189-af47-0aab382ce330
            orderItems: [
            {
                grossPrice: 12,
                currency: PLN,
                productName: bread,
                quantity: 3
            }]
            creationDate: 2021-12-01T12:30:22.52Z
            deliveryDate: 2021-12-01T13:30:22.52Z
            clientAddress:
                street: Prosta 12
                city: Warszawa
                zipCode: 00-631
            additionalInfo: Info from the client
            orderStatus: Pending
    OrderForCreation:
        description: Model for placing new order by Customer
        type: object
        properties:
            orderItems: OrderItemForCreation[]
            clientAddress:
                type: object
                properties:
                    street: string
                    city: string
                    zipCode: string
            additionalInfo: string
        example:
            orderItems: [
            {
                productId: ca543631-3df7-4d06-8091-179df67c8460,
                quantity: 3
            }]
            clientAddress:
                street: Prosta 12
                city: Warszawa
                zipCode: 00-631
            additionalInfo: Info from the client
    Product:
        description: Product
        type: object
        properties:
            productId: UUID
            name: string
            category: string
            price: number
            quantity:
                type: number
                description: Available quantity. Will always be integral.
        example:
            productId: 061ac70b-e370-40ca-a12e-9ea146ae9429
            name: Milk
            category: Food
            price: 12
            quantity: 100
    ProductForCreation:
        description: Product for Creation
        type: object
        properties:
            name: string
            category: string
            price: number
            quantity:
                type: number
                description: Available quantity. Will always be integral.
        example:
            name: Milk
            category: Food
            price: 12
            quantity: 100
    ProductForUpdate:     
        description: Product for Update
        type: object
        properties: 
            name: string
            category: string
            price: number
            quantity:
                type: number
                description: Available quantity. Will always be integral.
        example:
            name: Milk
            category: Food
            price: 12
            quantity: 100
    CourierStatus:
        type: object
        description: Order Status
        properties:
            orderStatus:
                type: string
                enum: [NotAvaible, AvaibleForDelivery, DuringDelivery]

/orders:
    post:
        securedBy: [ oauth_2_0 ]
        description: Create new order
        body:
            application/json:
                type: OrderForCreation
        responses:
            201:
                description: Successfully created order
                body:
                    application/json:
                        type: Order
                headers:
                    Location:
                        description: 'URI for the new resource returned'
                        type: string
            404:
                description: Failed to create order
                body:
                    text/plain:
                        type: string
    /shop:
        get:
            securedBy: [ oauth_2_0 ]
            is: [ paginated ]
            description: Get all shop orders, sorted by creation date (paginated)
            responses:
                200:
                    description: Successfully got orders.
                    body:
                        application/json:
                            type: Order[]
        /pending:
            get:
                securedBy: [ oauth_2_0 ]
                is: [ paginated ]
                description: Get all pending (not completed yet) shop orders, sorted by creation date (paginated)
                responses:
                    200:
                        description: Successfully got orders.
                        body:
                            application/json:
                                type: Order[]                                
    /courier:
        get:
            securedBy: [ oauth_2_0 ]
            is: [ paginated ]
            description: Get all courier orders, sorted by creation date (paginated)
            responses:
                200:
                    description: Successfully got orders.
                    body:
                        application/json:
                            type: Order[]
        /current:
            get:
                securedBy: [ oauth_2_0 ]
                description: Get currently in progress order (current courier order)
                responses:
                    200:
                        description: Successfully got currently in progress order
                        body:
                            application/json:
                                type: Order
                    404:
                        description: Current order not found.
                        body:
                            text/plain:
                                type: string   
    /customer:
        get:
            securedBy: [ oauth_2_0 ]
            is: [ paginated ]
            description: Get all customer orders, sorted by creation date (paginated)
            responses:
                200:
                    description: Successfully got products info.
                    body:
                        application/json:
                            type: Order[]
        /pending:
            get:
                securedBy: [ oauth_2_0 ]
                is: [ paginated ]
                description: Get all orders in progress, sorted by creation date (paginated)
                responses:
                    200:
                        description: Successfully got orders.
                        body:
                            application/json:
                                type: Order[]
    /{orderId}:
        get:
            securedBy: [ oauth_2_0 ]
            description: Get selected order
            responses:
                200:
                    description: Successfully got selected order
                    body:
                        application/json:
                            type: Order
                404:
                    description: Failed to get selected order
                    body:
                        text/plain:
                            type: string
        patch:
            securedBy: [ oauth_2_0 ]
            description: Update order status
            body:
                application/json:
                    type: OrderStatus
            responses:
                204:
                    description: Successfully updated order status
                404:
                    description: Order doesn't exist
                    body:
                        text/plain:
                            type: string
/courier:
    /status:
        patch:
            securedBy: [ oauth_2_0 ]
            description: Update courier status
            body:
                application/json:
                    type: CourierStatus
            responses:
                204:
                    description: Successfully updated courier status 
                400:
                    description: Failed to update courier status
                    body:
                        text/plain:
                            type: string
        get:
            securedBy: [ oauth_2_0 ]
            description: Get courier status 
            responses:
                200:
                    description: Successfully got courier status    
                    body:
                        application/json:
                            type: CourierStatus
                400:
                    description: Failed to get courier status
                    body:
                        text/plain:
                            type: string
/products:
    /{productId}:
        get:
            description: Get product information
            responses:
                200:
                    description: Successfully got product info.
                    body:
                        application/json:
                            type: Product
                404:
                    description: Product not found.
                    body:
                        text/plain:
                            type: string                      
        delete:
            securedBy: [ oauth_2_0 ]
            description: Remove product from shops's offer
            responses:
                204:
                    description: Succesfully deleted product.
                404:
                    description: Product not found.
                    body:
                        text/plain:
                            type: string
        put:
            securedBy: [ oauth_2_0 ]
            description: Update product in shop's offer
            body:
                application/json:
                    type: ProductForUpdate
            responses:
                204:
                    description: Succesfully product updated
                404:
                    description: Product not found.
                    body:
                        text/plain:
                            type: string
                                   
    /category:
        /{category}:
            get:
                is: [ paginated ]
                description: Get all products in the specifies category (paginated)
                responses:
                    200:
                        description: Successfully got products info.
                        body:
                            application/json:
                                type: Product[]
                    404:
                        description: Category not found.
                        body:
                            text/plain:
                                type: string
                    
    get:
        is: [ paginated ]
        description: Get all products (paginated)
        responses:
            200:
                description: Successfully got products info.
                body:
                    application/json:
                        type: Product[]
    post:
        securedBy: [ oauth_2_0 ]
        description: Add product to shop's offer
        body:
            application/json:
                type: ProductForCreation
        responses:
            201:
                description: Succesfully added product.
                body:
                    application/json:
                        type: Product
                headers:
                    Location:
                        description: 'URI for the new resource returned'
                        type: string
            400:
                description: Failed to add product.
                text/plain:
                    type: string
