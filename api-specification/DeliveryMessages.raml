#%RAML 1.0
title: Groceries delivery app - Delivery module
version: v1
baseUri: https://mini-delivery.com/
traits:
  paginated:
      queryParameters:
        page:
          description: page
          required: false
          type: integer
          format: int32
        pageSize:
          description: pageSize
          required: false
          type: integer
          format: int32    
      responses:
        200:
          headers:
            x-total-pages:
securitySchemes:
    oauth_2_0:
        description: |
            OAuth 2.0 for authenticating API requests.
        type: OAuth 2.0
        describedBy:
            headers:
                Authorization:
                    description: |
                        Used to send a valid OAuth 2 access token. Do not use 
                        with the "access_token" query string parameter.
                    type: string
            queryParameters:
                access_token:
                    description: |
                        Used to send a valid OAuth 2 access token. Do not use together with 
                        the "Authorization" header
                    type: string
            responses:
                401:
                    description: |
                        Bad or expired token. This can happen if the user or Identity Provider
                        revoked or expired an access token. To fix, you should re-
                        authenticate the user.
                403:
                    description: |
                        Bad OAuth request (wrong consumer key, bad nonce, expired
                        timestamp...). Re-authenticating the user won't help here.
        settings:
            authorizationUri: https://example-identity-provider.com/oauth2/authorize
            accessTokenUri: https://example-identity-provider.com/oauth2/token
            authorizationGrants: [ authorization_code ]
types:
    UUID:
        type: string
        description: UUID
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    OrderItem:
        description: element of an order
        type: object
        properties:
            orderItemId: UUID
            grossPrice:
                type: number
                description: the final sales price per unit of an item
            currency:
                type: string
                pattern: ^[A-Z]{3}$
            productName: string
            quantity: number
        example:
            orderItemId: ca543631-3df7-4d06-8091-179df67c8460
            grossPrice: 12
            currency: PLN
            productName: bread
            quantity: 3
    OrderStatus:
        type: object
        description: Order Status
        properties:
            orderStatus:
                type: string
                enum: [Pending, InPreparation, ReadyForDelivery, PickedUpByCourier, RejectedByShop, RejectedByCustomer, Delivered]
    Order:
        description: Groceries products order
        type: object
        properties:
            orderId: UUID
            orderItems: OrderItem[]
            creationDate: datetime
            deliveryDate: datetime
            clientAddress: 
                type: object
                properties:
                    street: string
                    city: string
                    zipCode: string
            additionalInfo: string
            orderStatus: OrderStatus
            confirmedPayment: boolean
        example:
            orderId: c2cf4e9e-0393-4189-af47-0aab382ce330
            orderItems: [
            {
                orderItemId: ca543631-3df7-4d06-8091-179df67c8460,
                grossPrice: 12,
                currency: PLN,
                productName: bread,
                quantity: 3
            }]
            creationDate: 2021-12-01T12:30:22.52Z
            deliveryDate: 2021-12-01T13:30:22.52Z
            clientAddress: 
                street: Prosta 12
                city: Warszawa
                zipCode: 00-631
            additionalInfo: Info from the client
            orderStatus: Pending
            confirmedPayment: false
	CourierStatus:
		type: object
        description: Courier Status
        properties:
            courierStatus:
                type: string
                enum: [Busy, Available, Away]
	PickupRequest:
		type: object
		description: A request for the courier to pick up an order
		properties:
			courierId:
				type: UUID
			orderId:
				type: UUID
	Message:
		type: object
		description: A message sent between a client and a courier
		properties:
			sender:
				type: UUID
			subject:
				type: string
			body:
				type: string

/status:
	/{courierId}:
		get:
			securedBy: [ oauth_2_0 ]
			description: Query the status of a courier
			responses:
				200:
					description: Successfully got courier status.
					body:
						application/json:
							type: CourierStatus
				404:
					description: Courier doen't exist
					body:
						text/plain:
							type: string
/requestPickup:
	post:
		securedBy: [ oauth_2_0 ]
		description: Request the courier to pick up the order.
		body:
			application/json:
				type: PickupRequest

/message:
	/client:
		/{clientId}:
			post:
                securedBy: [ oauth_2_0 ]
				description: Send a message to the client.
				body:
					application/json:
						type: Message
	/courier:
		/{courierId}:
			post:
                securedBy: [ oauth_2_0 ]
				description: Send a message to the courier.
				body:
					application/json:
						type: Message
